docker_image = "muss:${env.BUILD_NUMBER}"

def drun(docker_args, cmd) {
  sh """
    docker run \
      -e GOPRIVATE -e GO111MODULE \
      ${docker_args} \
      ${docker_image} ${cmd}
  """
}

def go(cmd) {
  drun("--rm", "go ${cmd} ./...")
}

pipeline {
  agent {
    label "docker"
  }
  options {
    ansiColor('xterm')
  }
  environment {
    GOPRIVATE = 'gerrit.instructure.com'
  }
  stages {
    stage('Build') {
      steps {
        sh """docker build --pull -f ci/Dockerfile --tag ${docker_image} ."""
      }
    }
    stage('Tests') {
      parallel {
        stage('Test') {
          environment {
            coverage_vol = "muss_coverage"
            container = "muss${env.BUILD_NUMBER}"
          }
          steps {
            sh "mkdir -p coverage"
            drun("--name '${env.container}' -v ${env.coverage_vol}:/src/coverage", "make test")
            sh """
              docker cp "${env.container}:/src/coverage" ./
              docker rm "${env.container}"
              docker volume rm "${env.coverage_vol}"
            """
          }
          post {
            success {
              archiveArtifacts artifacts: 'coverage/**'
              publishHTML(reportDir: 'coverage/',
                          reportFiles: 'index.html',
                          reportName: 'Code Coverage',
                          keepAll: true,
                          alwaysLinkToLastBuild: false,
                          allowMissing: false)

            }
          }
        }
        stage('Vet') {
          steps {
            go("vet")
          }
        }
      }
    }
    stage('Post-Merge') {
      when { environment name: "GERRIT_EVENT_TYPE", value: "change-merged" }
      environment {
        DOCKER_TAG = 'starlord.inscloudgate.net/deploy/muss:latest'
      }
      steps {
        sh """
          docker tag ${docker_image} ${DOCKER_TAG}
          docker push ${DOCKER_TAG}
          docker rmi ${DOCKER_TAG}
        """
      }
    }
  }
  post {
    always {
      sh """
        docker rmi "${docker_image}"
      """
    }
  }
}
